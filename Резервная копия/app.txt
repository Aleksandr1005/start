from flask import Flask, render_template, url_for, request, redirect, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
import sqlite3
import hashlib
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///vkr.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'hdwajdiwajfiojwaofjoaiwjfiojfwaojfwoajfioawj'
db = SQLAlchemy(app)


login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.login_message = "Авторизуйтесь для доступа к этой странице"
login_manager.login_message_category = "success"

id_user = 0

@login_manager.user_loader
def load_user(user_id):
    return UserLogin().fromDB(user_id)


class Account(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(300), nullable=False)
    email = db.Column(db.String(300), nullable=False)
    password = db.Column(db.String(300), nullable=False)

    def __repr__(self):
        return '<Account %r>' % self.id


class UserLogin():
    def fromDB(self, user_id):
        datebase = sqlite3.connect('instance/vkr.db')
        sql = datebase.cursor()
        sql.execute(f"SELECT * FROM account WHERE id='{user_id[0]}' LIMIT 1")
        res = sql.fetchone()
        if res is not None:
            self.__user = res
        else:
            print("Пользователь не найден")
        return self
    
    def create(self, user):
        self.__user = user
        return self

    def is_authenticated(self):
        return True
    
    def is_active(self):
        return True
    
    def is_anonymous(self):
        return False
    
    def get_id(self):
        return str(self.__user[0])


def str_to_list(var):
    var = var.replace("'", "").replace("(", "").replace(")", "").split(", ")
    return var

@app.route('/')
@app.route('/home')
def home():
    return render_template("index.html")


@app.route('/login', methods=['POST', 'GET'])
def login():
    if current_user.is_authenticated:
        return redirect('/personal-account')

    if request.method == 'POST':   
        datebase = sqlite3.connect('instance/vkr.db')
        sql = datebase.cursor()
        name = request.form['username']
        password = hashlib.md5(request.form['password'].encode('utf-8')).hexdigest()

        sql.execute(f"SELECT * FROM account WHERE name='{name}' and password='{password}' LIMIT 1")
        user = sql.fetchone()
        if user and str(user[3]) == str(password):
            userlogin = UserLogin().create(user)
            rm = True if request.form.get('remainme') else False
            login_user(userlogin, remember=rm)
            return redirect(request.args.get("next") or '/personal-account')
        else:
            flash("Пароль неверен", "error")
            
    return render_template("login.html")


@app.route('/register-account', methods=['POST', 'GET'])
def account():
    if request.method == 'POST':
        if request.form['password'] == request.form['repeat_password']:
            name = request.form['username']
            email = request.form['email']
            hash_password = hashlib.md5(request.form['password'].encode('utf-8')).hexdigest()
            new_account = Account(name=name, email=email, password=hash_password)

            if new_account:
                db.session.add(new_account)
                db.session.commit()
                flash("Вы успешно зарегистрированы", "success")
                return redirect('/login')
            else:
                flash("При создании аккаунта произошла ошибка", "error")
        else:
            flash("Неверно заполнены поля", "error")
    return render_template("register_account.html")


@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("Вы вышли из профиля")
    return redirect("/login")

@app.route('/personal-account')
@login_required
def personal_account():
    sqliteConnection = sqlite3.connect('instance/vkr.db')
    sql_query = """SELECT name FROM sqlite_master WHERE type='table';"""
    cursor = sqliteConnection.cursor()
    cursor.execute(sql_query)
    projects = [item[0] for item in cursor.fetchall()]
    projects.pop(0)
    project_list = {}
    project = []
    cursor.execute(f"SELECT name FROM account WHERE id = '{current_user.get_id()}'") 
    res = cursor.fetchone()
    for i in range(len(projects)):
        query = sqliteConnection.cursor()
        query.execute(f"SELECT meaning FROM '{projects[i]}';")
        res_meaning = query.fetchall()
        if int(current_user.get_id()) == 1:
            project = [item[0] for item in res_meaning]
            project_list[i] =  project[0], project[1], project[2], project[3], project[4], project[5], project[6]
        elif res_meaning[4] == res:
            project = [item[0] for item in res_meaning]
            project_list[i] =  project[0], project[1], project[2], project[3], project[4], project[5], project[6]
    return render_template("/personal-account.html", project_list = project_list)


@app.route('/project')
@login_required
def project():
    sqliteConnection = sqlite3.connect('instance/vkr.db')
    sql_query = """SELECT name FROM sqlite_master WHERE type='table';"""
    cursor = sqliteConnection.cursor()
    cursor.execute(sql_query)
    projects = [item[0] for item in cursor.fetchall()]
    projects.pop(0)
    project_list = {}
    for i in range(len(projects)):
        query = sqliteConnection.cursor()
        query.execute(f"SELECT meaning FROM {projects[i]};")
        project = [item[0] for item in query.fetchall()]
        project_list[i] =  project[0], project[1], project[2], project[3], project[4], project[5], project[6]
    return render_template("project.html", project_list = project_list)


@app.route('/project/<string:study_title>')
def project_detail(study_title):
    sqliteConnection = sqlite3.connect('instance/vkr.db')
    sql_query = f"SELECT * FROM {study_title} ;"
    cursor = sqliteConnection.cursor()
    cursor.execute(sql_query)
    project = [item for item in cursor.fetchall()]
    return render_template("project_detail.html", project = project, project_name = project[0][1])


@app.route('/project/view/<string:study_title>')
def view(study_title):
    sqliteConnection = sqlite3.connect('instance/vkr.db')
    sql_query = f"SELECT * FROM {study_title} ;"
    cursor = sqliteConnection.cursor()
    cursor.execute(sql_query)
    project = [item for item in cursor.fetchall()]
    return render_template("view.html", project = project, project_name = project[0][1])


@app.route('/project/<project>/<project_name>/edit', methods=['POST', 'GET'])
def project_edit(project, project_name):
    sql = sqlite3.connect('instance/vkr.db')
    project_name = str_to_list(project_name)
    project = str_to_list(project)
    now = datetime.now()
    cursor = sql.cursor()
    cursor.execute(f"SELECT name FROM account WHERE id = '{current_user.get_id()}'") 
    res = cursor.fetchone()
    current_time = now.strftime("%H:%M:%S")

    if request.method == 'POST':
        new_name = request.form['item_name']
        new_value = request.form['point_value']
        sql.execute(f"UPDATE '{project_name[0]}' SET name = '{new_name}', meaning = '{new_value}' WHERE name = '{project[0]}' AND meaning = '{project[1]}';")
        sql.execute(f"UPDATE '{project_name[0]}' SET meaning ='{res[0]}' WHERE name = 'Кем редактировано'")
        sql.execute(f"UPDATE '{project_name[0]}' SET meaning ='{current_time}' WHERE name = 'Время последнего редактиварония'")
        sql.commit()
        return redirect(f"/project/{project_name[0]}")
    return render_template("edit.html", project = project)


@app.route('/delete_project/<project_name>')
def delete_project(project_name):
    sql = sqlite3.connect('instance/vkr.db')
    sql.execute(f"DROP TABLE {project_name}")
    sql.commit()
    return redirect("/project")


@app.route('/delete_detail_project/<project_name>/<name>/<meaning>')
def delete_detail_project(project_name, name, meaning):
    sql = sqlite3.connect('instance/vkr.db')
    sql.execute(f"DELETE FROM '{project_name}' WHERE name = '{name}' and meaning = '{meaning}'")
    sql.commit()
    return redirect(f"/project/{project_name}")


@app.route('/new-project', methods=['POST', 'GET'])
def new_project():
    if request.method == 'POST':
        sql = sqlite3.connect('instance/vkr.db')
        cursor = sql.cursor()
        study_title = request.form['title_project']
        study_purpose = request.form['purpose_project']
        study_status = 'Активна'
        now = datetime.now()
        cursor.execute(f"SELECT name FROM account WHERE id = '{current_user.get_id()}'") 
        res = cursor.fetchone()
        current_time = now.strftime("%H:%M:%S")
        sql.execute(f"CREATE TABLE {study_title} (name, meaning)")
        sql.execute(f"""INSERT INTO {study_title} VALUES
            ('Название','{study_title}'),
            ('Цель исследования', '{study_purpose}'),
            ('Статус', '{study_status}'),
            ('Время создания проекта', '{current_time}'),
            ('Кем создан проект', '{res[0]}'), 
            ('Время последнего редактиварония', '{current_time}'),
            ('Кем редактировано', '{res[0]}')
        """)
        sql.commit()
        return redirect(f"/new-project-shablon/{study_title}")
    return render_template("new_project.html")

@app.route('/new-project-shablon/<string:study_title>', methods=['POST', 'GET'])
def new_project_shablon(study_title):
    sql = sqlite3.connect('instance/vkr.db')
    if request.method == 'POST':
        name = request.form['name']
        sql.execute(f"INSERT INTO {study_title} VALUES ('ФИО', '{name}')")
        birthday = request.form['birthday']
        sql.execute(f"INSERT INTO {study_title} VALUES ('Дата рождения', '{birthday}')")
        height = request.form['height']
        sql.execute(f"INSERT INTO {study_title} VALUES ('Рост', '{height}')")
        weight = request.form['weight']
        sql.execute(f"INSERT INTO {study_title} VALUES ('Вес', '{weight}')")
        sex = request.form['sex']
        sql.execute(f"INSERT INTO {study_title} VALUES ('Пол', '{sex}')")
        home = request.form['home']
        sql.execute(f"INSERT INTO {study_title} VALUES ('Место жительства', '{home}')")
        number_telephone = request.form['number_telephone']
        sql.execute(f"INSERT INTO {study_title} VALUES ('Номер телефона', '{number_telephone}')")
        email = request.form['email']
        sql.execute(f"INSERT INTO {study_title} VALUES ('Электронная почта', '{email}')")
        sql.commit()
        return redirect(f"/new-project/{study_title}")
    return render_template("new_project_shablon.html")

@app.route('/new-project/<string:study_title>', methods=['POST', 'GET'])
def new_project_detail(study_title):
    sql = sqlite3.connect('instance/vkr.db')
    if request.method == 'POST':
        name = request.form['item_name']
        value = request.form['point_value']
        sql.execute(f"""INSERT INTO {study_title} VALUES
            ('{name}', '{value}')
        """)
        sql.commit()
    sql_query = f"SELECT * FROM {study_title} ;"
    cursor = sql.cursor()
    cursor.execute(sql_query)
    project = [item for item in cursor.fetchall()]
    pr_1 = []
    for i in range(len(project) - 3):
       pr_1.append(project[i + 3])
    return render_template("new_project_detail.html", project = pr_1)


if __name__ == "__main__":
    app.run(debug=True)
